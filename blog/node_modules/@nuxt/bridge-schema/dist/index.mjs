import { existsSync, readdirSync } from 'node:fs';
import { defineUntypedSchema } from 'untyped';
import { resolve, join } from 'pathe';
import defu from 'defu';
import { isCI, isTest } from 'std-env';
import { withTrailingSlash, normalizeURL, joinURL } from 'ufo';
import createRequire from 'create-require';
import { pascalCase } from 'scule';
import jiti from 'jiti';

const app = defineUntypedSchema({
  vue: {
    config: {
      silent: {
        $resolve: async (val, get) => val ?? !await get("dev")
      },
      performance: {
        $resolve: async (val, get) => val ?? await get("dev")
      }
    }
  },
  app: {
    assetsPath: {
      $resolve: async (val, get) => val ?? await get("buildAssetsDir")
    }
  },
  appTemplatePath: {
    $resolve: async (val, get) => {
      if (val) {
        return resolve(await get("srcDir"), val);
      }
      if (existsSync(join(await get("srcDir"), "app.html"))) {
        return join(await get("srcDir"), "app.html");
      }
      return resolve(await get("buildDir"), "views/app.template.html");
    }
  },
  store: {
    $resolve: async (val, get) => val !== false && existsSync(join(await get("srcDir"), await get("dir.store"))) && readdirSync(join(await get("srcDir"), await get("dir.store"))).find((filename) => filename !== "README.md" && filename[0] !== ".")
  },
  vueMeta: null,
  head: {
    meta: [],
    link: [],
    style: [],
    script: []
  },
  meta: {
    meta: [],
    link: [],
    style: [],
    script: []
  },
  fetch: {
    server: true,
    client: true
  },
  extendPlugins: null,
  layouts: {},
  ErrorPage: null,
  loading: {
    color: "black",
    failedColor: "red",
    height: "2px",
    throttle: 200,
    duration: 5e3,
    continuous: false,
    rtl: false,
    css: true
  },
  loadingIndicator: {
    $resolve: async (val, get) => {
      val = typeof val === "string" ? { name: val } : val;
      return defu(val, {
        name: "default",
        color: await get("loading.color") || "#D3D3D3",
        color2: "#F5F5F5",
        background: await get("manifest") && await get("manifest.theme_color") || "white",
        dev: await get("dev"),
        loading: await get("messages.loading")
      });
    }
  },
  pageTransition: {
    $resolve: async (val, get) => {
      val = typeof val === "string" ? { name: val } : val;
      return defu(val, {
        name: "page",
        mode: "out-in",
        appear: await get("render.ssr") === false || Boolean(val),
        appearClass: "appear",
        appearActiveClass: "appear-active",
        appearToClass: "appear-to"
      });
    }
  },
  layoutTransition: {
    $resolve: (val) => {
      val = typeof val === "string" ? { name: val } : val;
      return defu(val, {
        name: "layout",
        mode: "out-in"
      });
    }
  },
  features: {
    store: true,
    layouts: true,
    meta: true,
    middleware: true,
    transitions: true,
    deprecations: true,
    validate: true,
    useAsyncData: true,
    fetch: true,
    clientOnline: true,
    clientPrefetch: true,
    componentAliases: true,
    componentClientOnly: true
  }
});

const build = defineUntypedSchema({
  build: {
    quiet: Boolean(isCI || isTest),
    analyze: {
      $resolve: async (val, get) => {
        if (val !== true) {
          return val ?? false;
        }
        const rootDir = await get("rootDir");
        return {
          template: "treemap",
          projectRoot: rootDir,
          filename: join(rootDir, ".nuxt/stats", "{name}.html")
        };
      }
    },
    profile: process.argv.includes("--profile"),
    extractCSS: false,
    cssSourceMap: {
      $resolve: async (val, get) => val ?? (await get("sourcemap.client") || await get("sourcemap.server")) ?? await get("dev")
    },
    ssr: void 0,
    parallel: {
      $resolve: async (val, get) => await get("build.extractCSS") ? false : Boolean(val)
    },
    cache: false,
    standalone: false,
    publicPath: {
      $resolve: async (val, get) => val ? withTrailingSlash(normalizeURL(val)) : await get("app").buildAssetsDir
    },
    serverURLPolyfill: "url",
    filenames: {
      app: ({ isDev, isModern }) => isDev ? `[name]${isModern ? ".modern" : ""}.js` : `[contenthash:7]${isModern ? ".modern" : ""}.js`,
      chunk: ({ isDev, isModern }) => isDev ? `[name]${isModern ? ".modern" : ""}.js` : `[contenthash:7]${isModern ? ".modern" : ""}.js`,
      css: ({ isDev }) => isDev ? "[name].css" : "css/[contenthash:7].css",
      img: ({ isDev }) => isDev ? "[path][name].[ext]" : "img/[name].[contenthash:7].[ext]",
      font: ({ isDev }) => isDev ? "[path][name].[ext]" : "fonts/[name].[contenthash:7].[ext]",
      video: ({ isDev }) => isDev ? "[path][name].[ext]" : "videos/[name].[contenthash:7].[ext]"
    },
    loaders: {
      $resolve: async (val, get) => {
        const styleLoaders = [
          "css",
          "cssModules",
          "less",
          "sass",
          "scss",
          "stylus",
          "vueStyle"
        ];
        for (const name of styleLoaders) {
          const loader = val[name];
          if (loader && loader.sourcemap === void 0) {
            loader.sourcemap = Boolean(await get("build.cssSourceMap"));
          }
        }
        return val;
      },
      file: { esModule: false },
      fontUrl: { esModule: false, limit: 1e3 },
      imgUrl: { esModule: false, limit: 1e3 },
      pugPlain: {},
      vue: {
        productionMode: { $resolve: async (val, get) => val ?? !await get("dev") },
        transformAssetUrls: {
          video: "src",
          source: "src",
          object: "src",
          embed: "src"
        },
        compilerOptions: { $resolve: async (val, get) => val ?? await get("vue.compilerOptions") }
      },
      css: {
        importLoaders: 0,
        esModule: false
      },
      cssModules: {
        importLoaders: 0,
        esModule: false,
        modules: {
          localIdentName: "[local]_[hash:base64:5]"
        }
      },
      less: {},
      sass: {
        sassOptions: {
          indentedSyntax: true
        }
      },
      scss: {},
      stylus: {},
      vueStyle: {}
    },
    styleResources: {},
    plugins: [],
    terser: {},
    hardSource: false,
    aggressiveCodeRemoval: false,
    optimizeCSS: {
      $resolve: async (val, get) => val ?? (await get("build.extractCSS") ? {} : false)
    },
    optimization: {
      runtimeChunk: "single",
      minimize: {
        $resolve: async (val, get) => val ?? !await get("dev")
      },
      minimizer: void 0,
      splitChunks: {
        chunks: "all",
        automaticNameDelimiter: "/",
        cacheGroups: {}
      }
    },
    splitChunks: {
      layouts: false,
      pages: true,
      commons: true
    },
    corejs: "auto",
    babel: {
      configFile: false,
      babelrc: false,
      plugins: [],
      presets: {},
      cacheDirectory: {
        $resolve: async (val, get) => val ?? await get("dev")
      }
    },
    postcss: {
      execute: void 0,
      postcssOptions: {
        $resolve: async (val, get) => {
          const postcssOptions = await get("postcss") || {};
          Object.assign(postcssOptions, defu(postcssOptions, val));
          return postcssOptions;
        }
      },
      sourcemap: void 0,
      implementation: void 0,
      order: ""
    },
    html: {
      minify: {
        collapseBooleanAttributes: true,
        decodeEntities: true,
        minifyCSS: true,
        minifyJS: true,
        processConditionalComments: true,
        removeEmptyAttributes: true,
        removeRedundantAttributes: true,
        trimCustomFragments: true,
        useShortDoctype: true
      }
    },
    template: void 0,
    watch: [],
    devMiddleware: {
      stats: "none"
    },
    hotMiddleware: {},
    vendor: {
      $meta: {
        deprecated: "vendor has been deprecated since nuxt 2"
      }
    },
    stats: {
      $resolve: async (val, get) => val === "none" || await get("build.quiet") ? false : val,
      excludeAssets: [
        /.map$/,
        /index\..+\.html$/,
        /vue-ssr-(client|modern)-manifest.json/
      ]
    },
    friendlyErrors: true,
    additionalExtensions: [],
    warningIgnoreFilters: [],
    followSymlinks: false
  }
});

const cli = defineUntypedSchema({
  cli: {
    badgeMessages: [],
    bannerColor: "green"
  }
});

const common = defineUntypedSchema({
  editor: void 0,
  watch: {
    $resolve: async (val, get) => {
      const rootDir = await get("rootDir");
      return Array.from(new Set(
        [].concat(val, await get("_nuxtConfigFiles")).filter(Boolean).map((p) => resolve(rootDir, p))
      ));
    }
  },
  styleExtensions: [".css", ".pcss", ".postcss", ".styl", ".stylus", ".scss", ".sass", ".less"],
  dir: {
    assets: "assets",
    app: "app",
    globalName: {
      $resolve: (val) => typeof val === "string" && /^[a-zA-Z]+$/.test(val) ? val.toLocaleLowerCase() : "nuxt"
    },
    modern: void 0,
    mode: {
      $resolve: async (val, get) => val || (await get("ssr") ? "spa" : "universal"),
      $schema: { deprecated: "`mode` option is deprecated" }
    },
    env: {
      $default: {},
      $resolve: (val) => {
        val = { ...val };
        for (const key in process.env) {
          if (key.startsWith("NUXT_ENV_")) {
            val[key] = process.env[key];
          }
        }
        return val;
      }
    },
    createRequire: {
      $resolve: (val) => {
        val = process.env.NUXT_CREATE_REQUIRE || val || (typeof globalThis.jest !== "undefined" ? "native" : "jiti");
        if (val === "jiti") {
          return (p) => jiti(typeof p === "string" ? p : p.filename, { esmResolve: true });
        }
        if (val === "native") {
          return (p) => createRequire(typeof p === "string" ? p : p.filename);
        }
        return val;
      }
    },
    target: {
      $resolve: (val) => ["server", "static"].includes(val) ? val : "server"
    },
    globals: {
      id: (globalName) => `__${globalName}`,
      nuxt: (globalName) => `$${globalName}`,
      context: (globalName) => `__${globalName.toUpperCase()}__`,
      pluginPrefix: (globalName) => globalName,
      readyCallback: (globalName) => `on${pascalCase(globalName)}Ready`,
      loadedCallback: (globalName) => `_on${pascalCase(globalName)}Loaded`
    },
    store: "store"
  },
  serverMiddleware: {
    $resolve: (val) => {
      if (!val) {
        return [];
      }
      if (!Array.isArray(val)) {
        return Object.entries(val).map(([path, handler]) => ({ path, handler }));
      }
      return val;
    }
  }
});

const generate = defineUntypedSchema({
  generate: {
    dir: {
      $resolve: async (val = "dist", get) => resolve(await get("rootDir"), val)
    },
    concurrency: 500,
    interval: 0,
    subFolders: true,
    fallback: { $resolve: (val) => val === true ? "400.html" : val || "200.html" },
    crawler: true,
    manifest: true,
    nojekyll: true,
    cache: {
      ignore: [],
      globbyOptions: {
        gitignore: true
      }
    },
    staticAssets: {
      dir: "static",
      base: {
        $resolve: async (val, get) => val || joinURL((await get("app")).buildAssetsDir, await get("generate.dir"))
      },
      versionBase: {
        $resolve: async (val, get) => val || joinURL(await get("generate.base"), await get("generate.version"))
      },
      version: {
        $resolve: (val) => val || String(Math.round(Date.now() / 1e3))
      }
    }
  }
});

const messages = defineUntypedSchema({
  messages: {
    loading: "Loading...",
    error_404: "This page could not be found",
    server_error: "Server error",
    nuxtjs: "Nuxt",
    back_to_home: "Back to the home page",
    server_error_details: "An error occurred in the application and your page could not be served. If you are the application owner, check your logs for details.",
    client_error: "Error",
    client_error_details: "An error occurred while rendering the page. Check developer tools console for details."
  }
});

const render = defineUntypedSchema({
  render: {
    bundleRenderer: {
      shouldPrefetch: () => false,
      shouldPreload: (_fileWithoutQuery, asType) => ["script", "style"].includes(asType),
      runInNewContext: {
        $resolve: async (val, get) => val ?? await get("dev")
      }
    },
    crossorigin: void 0,
    resourceHints: true,
    ssr: void 0,
    ssrLog: {
      $resolve: async (val, get) => await get("dev") ? Boolean(val) : false
    },
    http2: {
      push: false,
      shouldPush: null,
      pushAssets: null
    },
    static: {
      prefix: true
    },
    compressor: {
      threshold: 0
    },
    etag: {
      hash: false,
      weak: false
    },
    csp: {
      $resolve: async (val, get) => {
        if (!val) {
          return false;
        }
        return {
          hashAlgorithm: "sha256",
          allowedSources: void 0,
          policies: void 0,
          addMeta: Boolean(await get("target") === "static"),
          unsafeInlineCompatibility: false,
          reportOnly: await get("debug"),
          ...val
        };
      }
    },
    dist: {
      index: false,
      maxAge: "1y"
    },
    fallback: {
      dist: {},
      static: {
        skipUnknown: true,
        handlers: {
          ".htm": false,
          ".html": false
        }
      }
    }
  }
});

const router = defineUntypedSchema({
  router: {
    mode: "history",
    base: {
      $resolve: async (val, get) => val ? withTrailingSlash(normalizeURL(val)) : (await get("app")).baseURL
    },
    _routerBaseSpecified: {
      $resolve: async (_val, get) => typeof await get("router.base") === "string"
    },
    routes: [],
    routeNameSplitter: "-",
    middleware: {
      $resolve: (val) => Array.isArray(val) ? val : [val].filter(Boolean)
    },
    linkActiveClass: "nuxt-link-active",
    linkExactActiveClass: "nuxt-link-exact-active",
    linkPrefetchedClass: false,
    extendRoutes: null,
    scrollBehavior: {
      $schema: {
        deprecated: "router.scrollBehavior` property is deprecated in favor of using `~/app/router.scrollBehavior.js` file, learn more: https://nuxtjs.org/api/configuration-router#scrollbehavior"
      }
    },
    parseQuery: false,
    stringifyQuery: false,
    fallback: false,
    prefetchLinks: true,
    prefetchPayloads: true,
    trailingSlash: void 0
  }
});

const server = defineUntypedSchema({
  server: {
    https: false,
    port: process.env.NUXT_PORT || process.env.PORT || process.env.npm_package_config_nuxt_port || 3e3,
    host: process.env.NUXT_HOST || process.env.HOST || process.env.npm_package_config_nuxt_host || "localhost",
    socket: process.env.UNIX_SOCKET || process.env.npm_package_config_unix_socket,
    timing: (val) => val ? { total: true, ...val } : false
  }
});

const index = {
  ...app,
  ...build,
  ...cli,
  ...common,
  ...generate,
  ...messages,
  ...render,
  ...router,
  ...server
};

export { index as NuxtConfigSchema };
