import { computed, defineComponent, h } from "vue";
import { useSanity } from "../composables.mjs";
import { isVue2 } from "#imports";
const baseURL = "https://cdn.sanity.io/images";
const props = {
  assetId: { type: String, required: true },
  projectId: {
    type: String,
    default: null
  },
  dataset: {
    type: String,
    default: null
  },
  auto: { type: String },
  bg: { type: String },
  blur: {
    type: [Number, String],
    validator: (value) => Number(value) >= 0 && Number(value) <= 100
  },
  crop: {
    type: String,
    validator: (value) => [
      "top",
      "bottom",
      "left",
      "right",
      "center",
      "focalpoint",
      "entropy"
    ].includes(value)
  },
  dl: { type: String },
  dpr: {
    type: [Number, String],
    validator: (value) => [1, 2, 3].includes(Number(value))
  },
  fit: {
    type: String,
    validator: (value) => ["clip", "crop", "fill", "fillmax", "max", "scale", "min"].includes(
      value
    )
  },
  flip: {
    type: String,
    validator: (value) => ["h", "v", "hv"].includes(value)
  },
  fm: {
    type: String,
    validator: (value) => ["jpg", "pjpg", "png", "webp"].includes(value)
  },
  fpX: {
    type: [Number, String],
    validator: (value) => Number(value) <= 1 && Number(value) >= 0
  },
  fpY: {
    type: [Number, String],
    validator: (value) => Number(value) <= 1 && Number(value) >= 0
  },
  h: { type: [Number, String] },
  invert: { type: Boolean },
  maxH: { type: [Number, String] },
  maxW: { type: [Number, String] },
  minH: { type: [Number, String] },
  minW: { type: [Number, String] },
  or: {
    type: [Number, String],
    validator: (value) => [0, 90, 180, 270].includes(Number(value))
  },
  q: {
    type: [Number, String],
    validator: (value) => Number(value) >= 0 && Number(value) <= 100
  },
  rect: { type: String },
  sat: { type: [Number, String] },
  sharpen: {
    type: [Number, String],
    validator: (value) => Number(value) >= 0 && Number(value) <= 100
  },
  w: { type: [Number, String] }
};
const keys = Object.keys(props).filter((k) => !["assetId", "projectId", "dataset"].includes(k));
export default defineComponent({
  name: "SanityImage",
  props,
  setup(props2, { attrs, slots }) {
    const sanity = useSanity();
    const src = computed(() => {
      const queryParams = keys.map((prop) => {
        const urlFormat = prop.replace(/[A-Z]/, (r) => "-" + r.toLowerCase());
        return props2[prop] ? `${urlFormat}=${props2[prop]}` : void 0;
      }).filter(Boolean).join("&");
      const parts = props2.assetId?.split("-").slice(1) || [];
      const format = parts.pop();
      const projectId = props2.projectId || sanity.config.projectId;
      const dataset = props2.dataset || sanity.config.dataset || "production";
      const filename = `${parts.join("-")}.${format}${queryParams ? "?" + queryParams : ""}`;
      return [baseURL, projectId, dataset, filename].join("/");
    });
    return () => slots.default?.({ src: src.value }) || h("img", isVue2 ? { attrs: { ...attrs, src: src.value } } : { ...attrs, src: src.value });
  }
});
